// pre-declare some globals
/*jsl:import _globals.jsl*/

jQuery(function($){

	// check for form admin, not list
	if (typeof form == "undefined")
		return;

	// intialise field standard and advanced settings to mimic some Gravity Forms fields
	if (typeof fieldSettings != "undefined" && "text" in fieldSettings) {
        fieldSettings.gc_title = fieldSettings.text.replace(/, .rules_setting/, '');
        fieldSettings.gc_date_start = fieldSettings.date.replace(/, .rules_setting/, '');
        fieldSettings.gc_date_end = fieldSettings.date;
        fieldSettings.gc_time_start = fieldSettings.time;
        fieldSettings.gc_time_end = fieldSettings.time;
        fieldSettings.gc_location = fieldSettings.text;
        fieldSettings.gc_brand = fieldSettings.text;
        fieldSettings.gc_model = fieldSettings.text;
        fieldSettings.gc_firstname = fieldSettings.text;
        fieldSettings.gc_tel = fieldSettings.text;
        fieldSettings.gc_allday = fieldSettings.checkbox.replace(/, .choices_setting/, '');
        fieldSettings.gc_desc = fieldSettings.textarea + ', .gc_desc_template_setting';
	}

	var $fields = $('#add_google_calendar_fields input');

	if (! form.googleCalendar)
		$fields.addClass('disabled');

	// set selected calendar from form object
	$(document).bind("gform_load_form_settings", function(event, form) {
		$('#form_google_calendar').val(form.googleCalendar ? form.googleCalendar : '');
	});

	// handle change in selected calendar
	$('#form_google_calendar').change(function(){
		var calendar = $(this).val();

		form.googleCalendar = calendar;
		$fields.toggleClass('disabled', (calendar === ''));
		$fields.qtip('destroy');
		disabled_qtip();
	});

	$('#form_events_require_approval').change(function() {
		form.eventsRequireApproval = this.checked;
	});

	$('#form_freebusy_check').change(function() {
		form.freeBusyCheck = this.checked;
	});

	$fields.click(function(){
		if ($(this).hasClass('disabled'))
			return false;

		if (GetFieldsByType([this.id]).length > 0){
			alert('Only one event field can be added to the form');
			return false;
		}

		StartAddField(this.id);
		return true;
	});

	disabled_qtip();

	function disabled_qtip(){
		$fields.filter('.disabled').qtip({
			content: gfgcal.msg.calendar_not_selected,
			show: { delay: 500, solo: true },
			hide: { when: 'mouseout', fixed: true, delay: 200, effect: 'fade' },
			style: 'gformsstyle_left',
			position: {
				corner: {
					target: 'topLeft',
					tooltip: 'bottomRight'
				}
			}
		});
	}

});

/**
* duck punch Gravity Forms' function to stop it rejecting our custom field type
*/
var SetDateInputType = function(type){
	var field = GetSelectedField();

	SetFieldProperty('dateType', type);
	ToggleDateCalendar();
	LoadDateInputs();
};

/**
* duck punch Gravity Forms' function to stop it rejecting our custom field type
*/
var SetCalendarIconType = function(iconType, isInit){
	var field = GetSelectedField();

	if(iconType === undefined)
		iconType = "none";

	if(iconType == "none")
		jQuery("#gsetting_icon_none").attr("checked", true);
	else if(iconType == "calendar")
		jQuery("#gsetting_icon_calendar").attr("checked", true);
	else if(iconType == "custom")
		jQuery("#gsetting_icon_custom").attr("checked", true);

	SetFieldProperty('calendarIconType', iconType);
	ToggleCalendarIconUrl(isInit);
	LoadDateInputs();
};

/**
* toggle display of GC description content template
* @param {bool} isInit
*/
function ToggleGCDescTemplate(isInit){
	var speed = isInit ? "" : "slow";

	if(jQuery("#gfield_gc_desc_template_enabled").is(":checked")){
		jQuery("#gfield_gc_desc_content_container").show(speed);
		if(!isInit){
			PopulateContentTemplate("field_gc_desc_content_template");
		}
	} else {
		jQuery("#gfield_gc_desc_content_container").hide(speed);
	}
}

// set initial value on script load
if (typeof form != "undefined") {
	jQuery('#gfield_gc_desc_template_enabled').attr("checked", !!form.gcDescTemplateEnabled);
	jQuery('#field_gc_desc_content_template').val(form.gcDescTemplateEnabled ? form.gcDescTemplate : "");
}

ToggleGCDescTemplate(true);

/**
* update the form object before saving
* @param {Object} form
*/
function gfgcal_update_form_object(form) {

	/**
	* search for Google Calendar description field
	* @return {bool}
	*/
	function HasGCDescField(){
		var fields = form.fields, i, len;

		for (i = 0, len = fields.length; i < len; i++){
			if (fields[i].type == "gc_desc")
				return true;
		}
		return false;
	}

	form.gcDescTemplateEnabled = (jQuery("#gfield_gc_desc_template_enabled").is(":checked") && HasGCDescField());
	form.gcDescTemplate = form.gcDescTemplateEnabled ? jQuery("#field_gc_desc_content_template").val() : "";

	return form;
}

/**
* Gravity Forms post-v1.7 filter hook for before form update
* @param {Object} form
* return {Object}
*/
function gfgcal_pre_form_editor_save(form) {
	return gfgcal_update_form_object(form);
}

// handle difference between Gravity Forms pre- and post-v1.7
if (gfgcal.gf_pre17 === "true") {
	window.gform_before_update = gfgcal_update_form_object;
}
else {
	gform.addFilter("gform_pre_form_editor_save", "gfgcal_pre_form_editor_save");
}

/**
* duck punch Gravity Forms' function to stop it rejecting our custom field type
*/
var SaveForm = (function(){
	var oldSaveForm = SaveForm;

	return function(isNew){
		var errors, tf;

		if (form.googleCalendar) {
			errors = 0;

			if (GetFieldsByType(['gc_date_start', 'gc_title']).length < 2){
				alert(gfgcal.msg.mandatory_fields);
				errors++;
			}

/*			tf = GetFieldsByType(['gc_time_start', 'gc_time_end']).length;
			if (tf > 0 && tf < 2) {
				alert(gfgcal.msg.mandatory_time_fields);
				errors++;
			}*/

			if (errors > 0)
				return false;
		}

		oldSaveForm(isNew);
		return true;
	};
})();
